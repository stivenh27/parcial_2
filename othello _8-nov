#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <chrono>   // Para poder usar chrono
#include <thread>   // Para poder usar this_thread::sleep_for
#include <cstdlib> // para poder usra system
#include <random> // para el sorteo de primero y segundo
#include <tuple> // para poder usar tuplas
#include <cctype> // para volver caracteres a mayusculas 




using namespace std;

int bienvenida() {
    // Nombre del archivo de la bienvenida
    string nombreArchivo = "bienvenido.txt";

    // Crea un objeto ifstream para abrir el archivo
    ifstream archivo(nombreArchivo);

    // Verifica si el archivo se abrió correctamente
    if (archivo.is_open()) {
        //muestra el contenido del archivo
        string linea;
        while (getline(archivo, linea)) {
            cout << linea << endl;
        }

        // Cierra el archivo
        archivo.close();
    } else {
        // Si el archivo no se pudo abrir, muestra un mensaje de error
        cerr << "No se pudo abrir el archivo: " << nombreArchivo << endl;
    }

    return 0;
}
//-------------------------------------------------------------------------------------
int delay(int retraso) {

    int segundosDeRetraso = retraso;
    this_thread::sleep_for(chrono::seconds(segundosDeRetraso));


    return 0;
}
//-------------------------------------------------------------------------------------

// Función para simular un cambio de imagen
void simularCambioDeImagen(int numlineasenblanco) {
    for (int i = 0; i < numlineasenblanco; i++) {
        cout << endl;
    }
}

//-------------------------------------------------------------------------------------

string jugador1() {
    string nombre1;
    cout << "jugador 1, ingrese su nombre: ";
    cin >> nombre1;

    return nombre1;
}

//-------------------------------------------------------------------------------------
string jugador2() {
    string nombre2;
    cout << "jugador 2, ingrese su nombre: ";
    cin >> nombre2;
    
    return nombre2;
}

//-------------------------------------------------------------------------------------
int aleatorioEntre0y1() {
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<int> distribucion(0, 1);

    return distribucion(gen);
}

//-------------------------------------------------------------------------------------
string sorteoturnos(){
    string primero;
    string segundo;
    string nombre1 = jugador1();
    string nombre2 = jugador2();
    int sorteo = aleatorioEntre0y1();
    if (sorteo == 0){
        primero = nombre1;
        segundo = nombre2;
    }
    else{
        primero = nombre2;
        segundo = nombre1;
    }
    
    delay(2);
    simularCambioDeImagen(30);
    
    cout << "juega primero: " << primero << "(X)" << endl << "juega segundo: " << segundo << "(O)"<< endl;
    return (primero, segundo);

}
//-------------------------------------------------------------------------------------

tuple<char, char> turnoactual(){
    char turno1 = sorteoturnos(primero)
    char ficha1 = 'X'
    char turno2 = sorteoturnos(segundo)
    char ficha2 = 'O'
    
    return make_tuple(turno, ficha)
}
//-------------------------------------------------------------------------------------
const int tamtablero = 8;
char tablero[tamtablero][tamtablero];

void tableroinicial() {
    for (int i = 0; i < tamtablero; i++) {
        for (int j = 0; j < tamtablero; j++) {
            tablero[i][j] = ' ';
        }
    }
    tablero[3][3] = tablero[4][4] = 'X';
    tablero[3][4] = tablero[4][3] = 'O';
}

//-------------------------------------------------------------------------------------
void mostrartablero() {
    cout << "  A B C D E F G H " << endl;
    for (int i = 0; i < tamtablero; i++) {
        cout << i + 1 << " ";
        for (int j = 0; j < tamtablero; j++) {
            cout << tablero[i][j] << " ";
        }
        cout << endl;
    }
}

//-------------------------------------------------------------------------------------
tuple<int, int> pedirmovimiento() {
    
    int fila;
    cout << "ingrese la fila que desea marcar: " << endl;
    cin >> fila;
    
    int columna;
    char letra;
    cout << "ingrese la columna que desea marcar: " << endl;
    cin >> letra;
    letra = toupper(letra);
    if (letra == 'A'){
        columna = 0;
    }
    else if (letra == 'B') {
        columna = 1;
    }
    else if (letra == 'C') {
        columna = 2;
    }
    else if (letra == 'D') {
        columna = 3;
    }
    else if (letra == 'E') {
        columna = 4;
    }
    else if (letra == 'F') {
        columna = 5;
    }
    else if (letra == 'G') {
        columna = 6;
    }
    else if (letra == 'H') {
        columna = 7;
    }


    return make_tuple(fila, columna);
}

//-------------------------------------------------------------------------------------
bool vecindad(char simbolopropio, char simbolorival){
    mostrartablero();
    tuple<int, int> movimientoevaluado = pedirmovimiento();
    int i = get<0>(movimientoevaluado);
    int j = get<1>(movimientoevaluado);

    if(tablero[i][j-1] == simbolorival){
        return true;
    }
    else if(tablero[i][j+1] == simbolorival){
        return true;
    }
    else if(tablero[i-1][j] == simbolorival){
        return true;
    }
    else if(tablero[i+1][j] == simbolorival){
        return true;
    }
    else if(tablero[i-1][j-1] == simbolorival){
        return true;
    }
    else if(tablero[i+1][j+1] == simbolorival){
        return true;
    }
    else if(tablero[i-1][j+1] == simbolorival){
        return true;
    }
    else if(tablero[i+1][j-1] == simbolorival){
        return true;
    }
    else{
        return false;
    }
}

//-------------------------------------------------------------------------------------
bool sandwichderecha(char simbolopropio, char simbolorival){
    mostrartablero();
    tuple<int, int> movimientoevaluado = pedirmovimiento();
    int i = get<0>(movimientoevaluado);
    int j = get<1>(movimientoevaluado);
    for (int k = j; k < tamtablero; k++) {
        if (tablero[i][k] == simbolopropio){
            continue;
        }
        else if (tablero[i][k] == simbolorival){
            return true;
            }
        else if (tablero[i][k] == ' '){
            return false;
            }
        }
    
    }

//-------------------------------------------------------------------------------------
bool sandwichizquierda(char simbolopropio, char simbolorival){
    mostrartablero();
    tuple<int, int> movimientoevaluado = pedirmovimiento();
    int i = get<0>(movimientoevaluado);
    int j = get<1>(movimientoevaluado);
    for (int k = j; k >= 0; k--) {
        if (tablero[i][k] == simbolopropio){
            continue;
        }
        else if (tablero[i][k] == simbolorival){
            return true;
        }
        else if (tablero[i][k] == ' '){
            return false;
        }
    }
    
}
//-------------------------------------------------------------------------------------
bool sandwicharriba(char simbolopropio, char simbolorival){
    mostrartablero();
    tuple<int, int> movimientoevaluado = pedirmovimiento();
    int i = get<0>(movimientoevaluado);
    int j = get<1>(movimientoevaluado);
    for (int k = i; k >= 0 ; k--) {
        if (tablero[k][j] == simbolopropio){
            continue;
        }
        else if (tablero[k][j] == simbolorival){
            return true;
        }
        else if (tablero[k][j] == ' '){
            return false;
        }
    }
    
}
//-------------------------------------------------------------------------------------
bool sandwichabajo(char simbolopropio, char simbolorival){
    mostrartablero();
    tuple<int, int> movimientoevaluado = pedirmovimiento();
    int i = get<0>(movimientoevaluado);
    int j = get<1>(movimientoevaluado);
    for (int k = i; k < tamtablero ; k++) {
        if (tablero[k][j] == simbolopropio){
            continue;
        }
        else if (tablero[k][j] == simbolorival){
            return true;
        }
        else if (tablero[k][j] == ' '){
            return false;
        }
    }
    
}

//-------------------------------------------------------------------------------------
vector<tuple<int, int>> jugadasposibles() {
    vector<tuple<int, int>> disponibles = {};
    tuple <int, int> intento = pedirmovimiento();
    disponibles.push_back(intento);
    
    return disponibles;
}

//-------------------------------------------------------------------------------------
void hacerjugada(int fila, int columna, char simbolo) {
    if (fila >= 0 && fila < tamtablero && columna >= 0 && columna < tamtablero) {
        tablero[fila][columna] = simbolo;
    }
}


//-------------------------------------------------------------------------------------
void resultados() {
    
    mostrartablero();
    simularCambioDeImagen(30);
    int Rjugador1 = 0;
    int Rjugador2 = 0;
    int vacios = 0;
    for (int i = 0; i < tamtablero; i++) {
        for (int j = 0; j < tamtablero; j++) {
            char simbolo = tablero[i][j];
            if (simbolo == 'X'){
                Rjugador1 += 1;
            }
            else if (simbolo == 'O'){
                Rjugador2 += 1;
            }
            
        }

            
    }
    vacios = (tamtablero*tamtablero) - (Rjugador1+Rjugador2);
    cout << "el jugador 1 tiene: " << Rjugador1 << " fichas" << endl;
    cout << "el jugador 2 tiene: " << Rjugador2 << " fichas" << endl;
    cout << "quedaron: " << vacios << " espacios en blanco" << endl;
    
//-------------------------------------------------------------------------------------


}
int main() {
    bienvenida();
    delay(1);
    tableroinicial();
    mostrartablero();
    delay(1);
    simularCambioDeImagen(30);
    sorteoturnos();
    delay(2);
    simularCambioDeImagen(30);
    bienvenida();
    mostrartablero();
    int continuar = 0;
    while (continuar < 5){
        tuple<int, int> movimiento = pedirmovimiento();
        int fila = get<0>(movimiento);
        int columna = get<1>(movimiento);
        char simbolo = get<2>(movimiento);
        posiblesjugadas();
        hacerjugada(fila-1, columna-1, simbolo);
        simularCambioDeImagen(30);
        bienvenida();
        mostrartablero();
        continuar +=1;
        movimiento;
    }
    resultados();


    return 0;
}
